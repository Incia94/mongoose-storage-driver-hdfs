description = "HDFS storage driver for Mongoose"

apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

group = "com.github.emc-mongoose"
version = "0.1.9"

tasks.withType(JavaCompile) {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

task("create-dirs").doLast(
	{
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
)

repositories {
	mavenCentral()
}

ext {

	depVersion = [
		commonsJava: "1.4.1",
		disruptor: "3.3.4",
		dockerJava: "[3.0.13,)",
		hadoop: "2.9.0",
		log4j: "2.8.2",
		mongoose: "3.6.2",
	]

	setClassPath = {
		configurations -> [
			configurations.runtime
				.collect { file -> file.name }
				.join(" "),
		]
		.join(" ")
	}
}

configurations.all {
	resolutionStrategy {
		force "com.github.akurilov:java-commons:${depVersion.commonsJava}"
	}
}

dependencies {

	compileOnly(
		"com.github.emc-mongoose:mongoose-storage-driver-nio:${depVersion.mongoose}",
		"com.github.emc-mongoose:mongoose-ui:${depVersion.mongoose}",
		"com.github.akurilov:java-commons:${depVersion.commonsJava}",
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
	)

	compile(
		"org.glassfish.jersey.core:jersey-common:2.23.1",
		"org.glassfish.jersey.core:jersey-server:2.23.1",
		"org.apache.hadoop:hadoop-hdfs-client:${depVersion.hadoop}",
	)

	compile("org.apache.hadoop:hadoop-common:${depVersion.hadoop}") {
		exclude group: "com.sun.jersey", module: "jersey-core"
		exclude group: "com.sun.jersey", module: "jersey-server"
		exclude group: "javax.ws.rs", module: "jsr311-api"
	}

	runtime(
		"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",
	)

	testCompile(
		"junit:junit:[4,)",
		"com.github.docker-java:docker-java:${depVersion.dockerJava}",
		"com.github.emc-mongoose:mongoose-api-metrics:${depVersion.mongoose}",
		"com.github.emc-mongoose:mongoose-storage-driver-nio:${depVersion.mongoose}",
		"com.github.emc-mongoose:mongoose-ui:${depVersion.mongoose}",
		"com.github.akurilov:java-commons:${depVersion.commonsJava}",
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
		"org.apache.commons:commons-csv:1.1",
	)

	testRuntime(
		"com.lmax:disruptor:${depVersion.disruptor}",
	)
}

test {
	/*
	systemProperty "com.sun.management.jmxremote", "true"
	systemProperty "com.sun.management.jmxremote.port", "9010"
	systemProperty "com.sun.management.jmxremote.local.only", "false"
	systemProperty "com.sun.management.jmxremote.authenticate", "false"
	systemProperty "com.sun.management.jmxremote.ssl", "false"
	*/
	testLogging {
		events "passed", "skipped", "failed", "standardOut"
		showExceptions = true
		showStandardStreams = true
	}
}

// travis deploy stage runs "./gradlew check" again which is unnecessary
check.dependsOn -= test

jar {
	archiveName "$project.name.$extension"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from configurations.runtime.collect {
		it.isDirectory() ?
			it :
			(
				it.name.contains("hadoop-common") ?
					zipTree(it).matching {
						exclude "**/org.apache.hadoop.fs.FileSystem"
					} :
					zipTree(it)
			)
	}
	manifest {
		attributes(
			"Class-Path": setClassPath(configurations),
			"Implementation-Version": version,
			"Implementation-Title": "$name"
		)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	archiveName "$project.name-$classifier.$extension"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	archiveName "$project.name-$classifier.$extension"
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

def ossrhUsername = project.hasProperty("ossrhUsername") ?
	project.property("ossrhUsername") : null
def ossrhPassword = project.hasProperty("ossrhPassword") ?
	project.property("ossrhPassword") : null

signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

// see http://central.sonatype.org/pages/gradle.html for details
uploadArchives {

	// prevent the execution for empty (not leaf) subprojects and tests packages
	if(project.name.contains("tests")) {
		return
	}

	repositories {
		mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signing.signPom(deployment)
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom {

				groupId = rootProject.group
				name = "mongoose-storage-driver-hdfs"
				artifactId = name

				project {
					description = rootProject.description

					url "https://github.com/emc-mongoose/mongoose-storage-driver-hdfs/wiki"

					scm {
						connection "https://github.com/emc-mongoose/mongoose-storage-driver-hdfs.git"
						developerConnection "https://github.com/emc-mongoose/mongoose-storage-driver-hdfs.git"
						url "https://github.com/emc-mongoose/mongoose-storage-driver-hdfs.git"
					}

					licenses {
						license {
							name "The MIT License (MIT)"
							url "https://github.com/emc-mongoose/mongoose-storage-driver-hdfs/wiki/License"
						}
					}

					developers {
						developer {
							id "akurilov"
							name "Andrey Kurilov"
							email "akurilov123@gmail.com"
						}
					}
				}
			}
		}
	}
}
